{"ast":null,"code":"// For more examples:\n//   https://github.com/angular/angular/blob/master/modules/@angular/router/test/integration.spec.ts\nimport { waitForAsync, fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { asyncData } from '../testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Router, RouterLinkWithHref } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { Location } from '@angular/common';\nimport { click } from '../testing';\nimport { routes } from './app-routing.module';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { AboutComponent } from './about/about.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroService, TestHeroService } from './model/testing/test-hero.service';\nimport { TwainService } from './twain/twain.service';\nlet comp;\nlet fixture;\nlet page;\nlet router;\nlet location;\ndescribe('AppComponent & RouterTestingModule', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [AppModule, RouterTestingModule.withRoutes(routes)],\n      providers: [{\n        provide: HeroService,\n        useClass: TestHeroService\n      }]\n    }).compileComponents();\n  }));\n  it('should navigate to \"Dashboard\" immediately', fakeAsync(() => {\n    createComponent();\n    tick(); // wait for async data to arrive\n\n    expectPathToBe('/dashboard', 'after initialNavigation()');\n    expectElementOf(DashboardComponent);\n  }));\n  it('should navigate to \"About\" on click', fakeAsync(() => {\n    createComponent();\n    click(page.aboutLinkDe); // page.aboutLinkDe.nativeElement.click(); // ok but fails in phantom\n\n    advance();\n    expectPathToBe('/about');\n    expectElementOf(AboutComponent);\n  }));\n  it('should navigate to \"About\" w/ browser location URL change', fakeAsync(() => {\n    createComponent();\n    location.simulateHashChange('/about'); // location.go('/about'); // also works ... except, perhaps, in Stackblitz\n\n    advance();\n    expectPathToBe('/about');\n    expectElementOf(AboutComponent);\n  })); // Can't navigate to lazy loaded modules with this technique\n\n  xit('should navigate to \"Heroes\" on click (not working yet)', fakeAsync(() => {\n    createComponent();\n    page.heroesLinkDe.nativeElement.click();\n    advance();\n    expectPathToBe('/heroes');\n  }));\n}); ///////////////\n\nimport { HeroModule } from './hero/hero.module'; // should be lazy loaded\n\nimport { HeroListComponent } from './hero/hero-list.component'; ///////// Can't get lazy loaded Heroes to work yet\n\nxdescribe('AppComponent & Lazy Loading (not working yet)', () => {\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      imports: [AppModule, RouterTestingModule.withRoutes(routes)]\n    }).compileComponents();\n  }));\n  beforeEach(fakeAsync(() => {\n    createComponent();\n    router.resetConfig([{\n      path: 'heroes',\n      loadChildren: () => HeroModule\n    }]);\n  }));\n  it('should navigate to \"Heroes\" on click', waitForAsync(() => {\n    page.heroesLinkDe.nativeElement.click();\n    advance();\n    expectPathToBe('/heroes');\n    expectElementOf(HeroListComponent);\n  }));\n  it('can navigate to \"Heroes\" w/ browser location URL change', fakeAsync(() => {\n    location.go('/heroes');\n    advance();\n    expectPathToBe('/heroes');\n    expectElementOf(HeroListComponent);\n  }));\n}); ////// Helpers /////////\n\n/**\n * Advance to the routed page\n * Wait a tick, then detect changes, and tick again\n */\n\nfunction advance() {\n  tick(); // wait while navigating\n\n  fixture.detectChanges(); // update view\n\n  tick(); // wait for async data to arrive\n}\n\nfunction createComponent() {\n  fixture = TestBed.createComponent(AppComponent);\n  comp = fixture.componentInstance;\n  const injector = fixture.debugElement.injector;\n  location = injector.get(Location);\n  router = injector.get(Router);\n  router.initialNavigation();\n  spyOn(injector.get(TwainService), 'getQuote') // fake fast async observable\n  .and.returnValue(asyncData('Test Quote'));\n  advance();\n  page = new Page();\n}\n\nclass Page {\n  constructor() {\n    const links = fixture.debugElement.queryAll(By.directive(RouterLinkWithHref));\n    this.aboutLinkDe = links[2];\n    this.dashboardLinkDe = links[0];\n    this.heroesLinkDe = links[1]; // for debugging\n\n    this.comp = comp;\n    this.fixture = fixture;\n    this.router = router;\n  }\n\n}\n\nfunction expectPathToBe(path, expectationFailOutput) {\n  expect(location.path()).toEqual(path, expectationFailOutput || 'location.path()');\n}\n\nfunction expectElementOf(type) {\n  const el = fixture.debugElement.query(By.directive(type));\n  expect(el).toBeTruthy('expected an element for ' + type.name);\n  return el;\n}","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/app/app.component.router.spec.ts"],"names":["waitForAsync","fakeAsync","TestBed","tick","asyncData","RouterTestingModule","Router","RouterLinkWithHref","By","Location","click","routes","AppModule","AppComponent","AboutComponent","DashboardComponent","HeroService","TestHeroService","TwainService","comp","fixture","page","router","location","describe","beforeEach","configureTestingModule","imports","withRoutes","providers","provide","useClass","compileComponents","it","createComponent","expectPathToBe","expectElementOf","aboutLinkDe","advance","simulateHashChange","xit","heroesLinkDe","nativeElement","HeroModule","HeroListComponent","xdescribe","resetConfig","path","loadChildren","go","detectChanges","componentInstance","injector","debugElement","get","initialNavigation","spyOn","and","returnValue","Page","constructor","links","queryAll","directive","dashboardLinkDe","expectationFailOutput","expect","toEqual","type","el","query","toBeTruthy","name"],"mappings":"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","sourcesContent":["// For more examples:\n//   https://github.com/angular/angular/blob/master/modules/@angular/router/test/integration.spec.ts\nimport { waitForAsync, fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { asyncData } from '../testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Router, RouterLinkWithHref } from '@angular/router';\nimport { By } from '@angular/platform-browser';\nimport { Location } from '@angular/common';\nimport { click } from '../testing';\nimport { routes } from './app-routing.module';\nimport { AppModule } from './app.module';\nimport { AppComponent } from './app.component';\nimport { AboutComponent } from './about/about.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { HeroService, TestHeroService } from './model/testing/test-hero.service';\nimport { TwainService } from './twain/twain.service';\nlet comp;\nlet fixture;\nlet page;\nlet router;\nlet location;\ndescribe('AppComponent & RouterTestingModule', () => {\n    beforeEach(waitForAsync(() => {\n        TestBed\n            .configureTestingModule({\n            imports: [\n                AppModule,\n                RouterTestingModule.withRoutes(routes),\n            ],\n            providers: [{ provide: HeroService, useClass: TestHeroService }]\n        })\n            .compileComponents();\n    }));\n    it('should navigate to \"Dashboard\" immediately', fakeAsync(() => {\n        createComponent();\n        tick(); // wait for async data to arrive\n        expectPathToBe('/dashboard', 'after initialNavigation()');\n        expectElementOf(DashboardComponent);\n    }));\n    it('should navigate to \"About\" on click', fakeAsync(() => {\n        createComponent();\n        click(page.aboutLinkDe);\n        // page.aboutLinkDe.nativeElement.click(); // ok but fails in phantom\n        advance();\n        expectPathToBe('/about');\n        expectElementOf(AboutComponent);\n    }));\n    it('should navigate to \"About\" w/ browser location URL change', fakeAsync(() => {\n        createComponent();\n        location.simulateHashChange('/about');\n        // location.go('/about'); // also works ... except, perhaps, in Stackblitz\n        advance();\n        expectPathToBe('/about');\n        expectElementOf(AboutComponent);\n    }));\n    // Can't navigate to lazy loaded modules with this technique\n    xit('should navigate to \"Heroes\" on click (not working yet)', fakeAsync(() => {\n        createComponent();\n        page.heroesLinkDe.nativeElement.click();\n        advance();\n        expectPathToBe('/heroes');\n    }));\n});\n///////////////\nimport { HeroModule } from './hero/hero.module'; // should be lazy loaded\nimport { HeroListComponent } from './hero/hero-list.component';\n///////// Can't get lazy loaded Heroes to work yet\nxdescribe('AppComponent & Lazy Loading (not working yet)', () => {\n    beforeEach(waitForAsync(() => {\n        TestBed\n            .configureTestingModule({\n            imports: [\n                AppModule,\n                RouterTestingModule.withRoutes(routes),\n            ],\n        })\n            .compileComponents();\n    }));\n    beforeEach(fakeAsync(() => {\n        createComponent();\n        router.resetConfig([{ path: 'heroes', loadChildren: () => HeroModule }]);\n    }));\n    it('should navigate to \"Heroes\" on click', waitForAsync(() => {\n        page.heroesLinkDe.nativeElement.click();\n        advance();\n        expectPathToBe('/heroes');\n        expectElementOf(HeroListComponent);\n    }));\n    it('can navigate to \"Heroes\" w/ browser location URL change', fakeAsync(() => {\n        location.go('/heroes');\n        advance();\n        expectPathToBe('/heroes');\n        expectElementOf(HeroListComponent);\n    }));\n});\n////// Helpers /////////\n/**\n * Advance to the routed page\n * Wait a tick, then detect changes, and tick again\n */\nfunction advance() {\n    tick(); // wait while navigating\n    fixture.detectChanges(); // update view\n    tick(); // wait for async data to arrive\n}\nfunction createComponent() {\n    fixture = TestBed.createComponent(AppComponent);\n    comp = fixture.componentInstance;\n    const injector = fixture.debugElement.injector;\n    location = injector.get(Location);\n    router = injector.get(Router);\n    router.initialNavigation();\n    spyOn(injector.get(TwainService), 'getQuote')\n        // fake fast async observable\n        .and.returnValue(asyncData('Test Quote'));\n    advance();\n    page = new Page();\n}\nclass Page {\n    constructor() {\n        const links = fixture.debugElement.queryAll(By.directive(RouterLinkWithHref));\n        this.aboutLinkDe = links[2];\n        this.dashboardLinkDe = links[0];\n        this.heroesLinkDe = links[1];\n        // for debugging\n        this.comp = comp;\n        this.fixture = fixture;\n        this.router = router;\n    }\n}\nfunction expectPathToBe(path, expectationFailOutput) {\n    expect(location.path()).toEqual(path, expectationFailOutput || 'location.path()');\n}\nfunction expectElementOf(type) {\n    const el = fixture.debugElement.query(By.directive(type));\n    expect(el).toBeTruthy('expected an element for ' + type.name);\n    return el;\n}\n"]},"metadata":{},"sourceType":"module"}