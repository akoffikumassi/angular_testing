{"ast":null,"code":"import { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { cold, getTestScheduler } from 'jasmine-marbles';\nimport { TwainService } from './twain.service';\nimport { TwainComponent } from './twain.component';\ndescribe('TwainComponent (marbles)', () => {\n  let component;\n  let fixture;\n  let getQuoteSpy;\n  let quoteEl;\n  let testQuote; // Helper function to get the error message element value\n  // An *ngIf keeps it out of the DOM until there is an error\n\n  const errorMessage = () => {\n    const el = fixture.nativeElement.querySelector('.error');\n    return el ? el.textContent : null;\n  };\n\n  beforeEach(() => {\n    // Create a fake TwainService object with a `getQuote()` spy\n    const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n    getQuoteSpy = twainService.getQuote;\n    TestBed.configureTestingModule({\n      declarations: [TwainComponent],\n      providers: [{\n        provide: TwainService,\n        useValue: twainService\n      }]\n    });\n    fixture = TestBed.createComponent(TwainComponent);\n    component = fixture.componentInstance;\n    quoteEl = fixture.nativeElement.querySelector('.twain');\n    testQuote = 'Test Quote';\n  }); // A synchronous test that simulates async behavior\n\n  it('should show quote after getQuote (marbles)', () => {\n    // observable test quote value and complete(), after delay\n    const q$ = cold('---x|', {\n      x: testQuote\n    });\n    getQuoteSpy.and.returnValue(q$);\n    fixture.detectChanges(); // ngOnInit()\n\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    getTestScheduler().flush(); // flush the observables\n\n    fixture.detectChanges(); // update view\n\n    expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n    expect(errorMessage()).toBeNull('should not show error');\n  }); // Still need fakeAsync() because of component's setTimeout()\n\n  it('should display error when TwainService fails', fakeAsync(() => {\n    // observable error after delay\n    const q$ = cold('---#|', null, new Error('TwainService test failure'));\n    getQuoteSpy.and.returnValue(q$);\n    fixture.detectChanges(); // ngOnInit()\n\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    getTestScheduler().flush(); // flush the observables\n\n    tick(); // component shows error after a setTimeout()\n\n    fixture.detectChanges(); // update error message\n\n    expect(errorMessage()).toMatch(/test failure/, 'should display error');\n    expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n  }));\n});","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/app/twain/twain.component.marbles.spec.ts"],"names":["fakeAsync","TestBed","tick","cold","getTestScheduler","TwainService","TwainComponent","describe","component","fixture","getQuoteSpy","quoteEl","testQuote","errorMessage","el","nativeElement","querySelector","textContent","beforeEach","twainService","jasmine","createSpyObj","getQuote","configureTestingModule","declarations","providers","provide","useValue","createComponent","componentInstance","it","q$","x","and","returnValue","detectChanges","expect","toBe","flush","toBeNull","Error","toMatch"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,IAA7B,QAAyC,uBAAzC;AACA,SAASC,IAAT,EAAeC,gBAAf,QAAuC,iBAAvC;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,SAASC,cAAT,QAA+B,mBAA/B;AACAC,QAAQ,CAAC,0BAAD,EAA6B,MAAM;AACvC,MAAIC,SAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,WAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,SAAJ,CALuC,CAMvC;AACA;;AACA,QAAMC,YAAY,GAAG,MAAM;AACvB,UAAMC,EAAE,GAAGL,OAAO,CAACM,aAAR,CAAsBC,aAAtB,CAAoC,QAApC,CAAX;AACA,WAAOF,EAAE,GAAGA,EAAE,CAACG,WAAN,GAAoB,IAA7B;AACH,GAHD;;AAIAC,EAAAA,UAAU,CAAC,MAAM;AACb;AACA,UAAMC,YAAY,GAAGC,OAAO,CAACC,YAAR,CAAqB,cAArB,EAAqC,CAAC,UAAD,CAArC,CAArB;AACAX,IAAAA,WAAW,GAAGS,YAAY,CAACG,QAA3B;AACArB,IAAAA,OAAO,CAACsB,sBAAR,CAA+B;AAC3BC,MAAAA,YAAY,EAAE,CAAClB,cAAD,CADa;AAE3BmB,MAAAA,SAAS,EAAE,CACP;AAAEC,QAAAA,OAAO,EAAErB,YAAX;AAAyBsB,QAAAA,QAAQ,EAAER;AAAnC,OADO;AAFgB,KAA/B;AAMAV,IAAAA,OAAO,GAAGR,OAAO,CAAC2B,eAAR,CAAwBtB,cAAxB,CAAV;AACAE,IAAAA,SAAS,GAAGC,OAAO,CAACoB,iBAApB;AACAlB,IAAAA,OAAO,GAAGF,OAAO,CAACM,aAAR,CAAsBC,aAAtB,CAAoC,QAApC,CAAV;AACAJ,IAAAA,SAAS,GAAG,YAAZ;AACH,GAdS,CAAV,CAZuC,CA2BvC;;AACAkB,EAAAA,EAAE,CAAC,4CAAD,EAA+C,MAAM;AACnD;AACA,UAAMC,EAAE,GAAG5B,IAAI,CAAC,OAAD,EAAU;AAAE6B,MAAAA,CAAC,EAAEpB;AAAL,KAAV,CAAf;AACAF,IAAAA,WAAW,CAACuB,GAAZ,CAAgBC,WAAhB,CAA4BH,EAA5B;AACAtB,IAAAA,OAAO,CAAC0B,aAAR,GAJmD,CAI1B;;AACzBC,IAAAA,MAAM,CAACzB,OAAO,CAACM,WAAT,CAAN,CAA4BoB,IAA5B,CAAiC,KAAjC,EAAwC,yBAAxC;AACAjC,IAAAA,gBAAgB,GAAGkC,KAAnB,GANmD,CAMvB;;AAC5B7B,IAAAA,OAAO,CAAC0B,aAAR,GAPmD,CAO1B;;AACzBC,IAAAA,MAAM,CAACzB,OAAO,CAACM,WAAT,CAAN,CAA4BoB,IAA5B,CAAiCzB,SAAjC,EAA4C,mBAA5C;AACAwB,IAAAA,MAAM,CAACvB,YAAY,EAAb,CAAN,CAAuB0B,QAAvB,CAAgC,uBAAhC;AACH,GAVC,CAAF,CA5BuC,CAuCvC;;AACAT,EAAAA,EAAE,CAAC,8CAAD,EAAiD9B,SAAS,CAAC,MAAM;AAC/D;AACA,UAAM+B,EAAE,GAAG5B,IAAI,CAAC,OAAD,EAAU,IAAV,EAAgB,IAAIqC,KAAJ,CAAU,2BAAV,CAAhB,CAAf;AACA9B,IAAAA,WAAW,CAACuB,GAAZ,CAAgBC,WAAhB,CAA4BH,EAA5B;AACAtB,IAAAA,OAAO,CAAC0B,aAAR,GAJ+D,CAItC;;AACzBC,IAAAA,MAAM,CAACzB,OAAO,CAACM,WAAT,CAAN,CAA4BoB,IAA5B,CAAiC,KAAjC,EAAwC,yBAAxC;AACAjC,IAAAA,gBAAgB,GAAGkC,KAAnB,GAN+D,CAMnC;;AAC5BpC,IAAAA,IAAI,GAP2D,CAOvD;;AACRO,IAAAA,OAAO,CAAC0B,aAAR,GAR+D,CAQtC;;AACzBC,IAAAA,MAAM,CAACvB,YAAY,EAAb,CAAN,CAAuB4B,OAAvB,CAA+B,cAA/B,EAA+C,sBAA/C;AACAL,IAAAA,MAAM,CAACzB,OAAO,CAACM,WAAT,CAAN,CAA4BoB,IAA5B,CAAiC,KAAjC,EAAwC,yBAAxC;AACH,GAX2D,CAA1D,CAAF;AAYH,CApDO,CAAR","sourcesContent":["import { fakeAsync, TestBed, tick } from '@angular/core/testing';\nimport { cold, getTestScheduler } from 'jasmine-marbles';\nimport { TwainService } from './twain.service';\nimport { TwainComponent } from './twain.component';\ndescribe('TwainComponent (marbles)', () => {\n    let component;\n    let fixture;\n    let getQuoteSpy;\n    let quoteEl;\n    let testQuote;\n    // Helper function to get the error message element value\n    // An *ngIf keeps it out of the DOM until there is an error\n    const errorMessage = () => {\n        const el = fixture.nativeElement.querySelector('.error');\n        return el ? el.textContent : null;\n    };\n    beforeEach(() => {\n        // Create a fake TwainService object with a `getQuote()` spy\n        const twainService = jasmine.createSpyObj('TwainService', ['getQuote']);\n        getQuoteSpy = twainService.getQuote;\n        TestBed.configureTestingModule({\n            declarations: [TwainComponent],\n            providers: [\n                { provide: TwainService, useValue: twainService }\n            ]\n        });\n        fixture = TestBed.createComponent(TwainComponent);\n        component = fixture.componentInstance;\n        quoteEl = fixture.nativeElement.querySelector('.twain');\n        testQuote = 'Test Quote';\n    });\n    // A synchronous test that simulates async behavior\n    it('should show quote after getQuote (marbles)', () => {\n        // observable test quote value and complete(), after delay\n        const q$ = cold('---x|', { x: testQuote });\n        getQuoteSpy.and.returnValue(q$);\n        fixture.detectChanges(); // ngOnInit()\n        expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n        getTestScheduler().flush(); // flush the observables\n        fixture.detectChanges(); // update view\n        expect(quoteEl.textContent).toBe(testQuote, 'should show quote');\n        expect(errorMessage()).toBeNull('should not show error');\n    });\n    // Still need fakeAsync() because of component's setTimeout()\n    it('should display error when TwainService fails', fakeAsync(() => {\n        // observable error after delay\n        const q$ = cold('---#|', null, new Error('TwainService test failure'));\n        getQuoteSpy.and.returnValue(q$);\n        fixture.detectChanges(); // ngOnInit()\n        expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n        getTestScheduler().flush(); // flush the observables\n        tick(); // component shows error after a setTimeout()\n        fixture.detectChanges(); // update error message\n        expect(errorMessage()).toMatch(/test failure/, 'should display error');\n        expect(quoteEl.textContent).toBe('...', 'should show placeholder');\n    }));\n});\n"]},"metadata":{},"sourceType":"module"}