{"ast":null,"code":"/*\n* Mock async observables that return asynchronously.\n* The observable either emits once and completes or errors.\n*\n* Must call `tick()` when test with `fakeAsync()`.\n*\n* THE FOLLOWING DON'T WORK\n* Using `of().delay()` triggers TestBed errors;\n* see https://github.com/angular/angular/issues/10127 .\n*\n* Using `asap` scheduler - as in `of(value, asap)` - doesn't work either.\n*/\nimport { defer } from 'rxjs';\n/**\n * Create async observable that emits-once and completes\n * after a JS engine turn\n */\n\nexport function asyncData(data) {\n  return defer(() => Promise.resolve(data));\n}\n/**\n * Create async observable error that errors\n * after a JS engine turn\n */\n\nexport function asyncError(errorObject) {\n  return defer(() => Promise.reject(errorObject));\n}","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/testing/async-observable-helpers.ts"],"names":["defer","asyncData","data","Promise","resolve","asyncError","errorObject","reject"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,KAAT,QAAsB,MAAtB;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AAC5B,SAAOF,KAAK,CAAC,MAAMG,OAAO,CAACC,OAAR,CAAgBF,IAAhB,CAAP,CAAZ;AACH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASG,UAAT,CAAoBC,WAApB,EAAiC;AACpC,SAAON,KAAK,CAAC,MAAMG,OAAO,CAACI,MAAR,CAAeD,WAAf,CAAP,CAAZ;AACH","sourcesContent":["/*\n* Mock async observables that return asynchronously.\n* The observable either emits once and completes or errors.\n*\n* Must call `tick()` when test with `fakeAsync()`.\n*\n* THE FOLLOWING DON'T WORK\n* Using `of().delay()` triggers TestBed errors;\n* see https://github.com/angular/angular/issues/10127 .\n*\n* Using `asap` scheduler - as in `of(value, asap)` - doesn't work either.\n*/\nimport { defer } from 'rxjs';\n/**\n * Create async observable that emits-once and completes\n * after a JS engine turn\n */\nexport function asyncData(data) {\n    return defer(() => Promise.resolve(data));\n}\n/**\n * Create async observable error that errors\n * after a JS engine turn\n */\nexport function asyncError(errorObject) {\n    return defer(() => Promise.reject(errorObject));\n}\n"]},"metadata":{},"sourceType":"module"}