{"ast":null,"code":"import _asyncToGenerator from \"/home/yadadev/work/trainings/mean/angular/angular_testing/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { fakeAsync, inject, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute, ActivatedRouteStub, asyncData, click } from '../../testing';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroDetailService } from './hero-detail.service';\nimport { HeroModule } from './hero.module'; ////// Testing Vars //////\n\nlet activatedRoute;\nlet component;\nlet fixture;\nlet page; ////// Tests //////\n\ndescribe('HeroDetailComponent', () => {\n  beforeEach(() => {\n    activatedRoute = new ActivatedRouteStub();\n  });\n  describe('with HeroModule setup', heroModuleSetup);\n  describe('when override its provided HeroDetailService', overrideSetup);\n  describe('with FormsModule setup', formsModuleSetup);\n  describe('with SharedModule setup', sharedModuleSetup);\n}); ///////////////////\n\nfunction overrideSetup() {\n  class HeroDetailServiceSpy {\n    constructor() {\n      this.testHero = {\n        id: 42,\n        name: 'Test Hero'\n      };\n      /* emit cloned test hero */\n\n      this.getHero = jasmine.createSpy('getHero').and.callFake(() => asyncData(Object.assign({}, this.testHero)));\n      /* emit clone of test hero, with changes merged in */\n\n      this.saveHero = jasmine.createSpy('saveHero').and.callFake(hero => asyncData(Object.assign(this.testHero, hero)));\n    }\n\n  } // the `id` value is irrelevant because ignored by service stub\n\n\n  beforeEach(() => activatedRoute.setParamMap({\n    id: 99999\n  }));\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [HeroModule],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }, // HeroDetailService at this level is IRRELEVANT!\n      {\n        provide: HeroDetailService,\n        useValue: {}\n      }]\n    }) // Override component's own provider\n    .overrideComponent(HeroDetailComponent, {\n      set: {\n        providers: [{\n          provide: HeroDetailService,\n          useClass: HeroDetailServiceSpy\n        }]\n      }\n    }).compileComponents();\n  }));\n  let hdsSpy;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield createComponent(); // get the component's injected HeroDetailServiceSpy\n\n    hdsSpy = fixture.debugElement.injector.get(HeroDetailService);\n  }));\n  it('should have called `getHero`', () => {\n    expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n  });\n  it('should display stub hero\\'s name', () => {\n    expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n  });\n  it('should save stub hero change', fakeAsync(() => {\n    const origName = hdsSpy.testHero.name;\n    const newName = 'New Name';\n    page.nameInput.value = newName; // In older browsers, such as IE, you might need a CustomEvent instead. See\n    // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n\n    page.nameInput.dispatchEvent(new Event('input')); // tell Angular\n\n    expect(component.hero.name).toBe(newName, 'component hero has new name');\n    expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n    click(page.saveBtn);\n    expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n    tick(); // wait for async save to complete\n\n    expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n    expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n  }));\n  it('fixture injected service is not the component injected service', // inject gets the service from the fixture\n  inject([HeroDetailService], fixtureService => {\n    // use `fixture.debugElement.injector` to get service from component\n    const componentService = fixture.debugElement.injector.get(HeroDetailService);\n    expect(fixtureService).not.toBe(componentService, 'service injected from fixture');\n  }));\n} ////////////////////\n\n\nimport { getTestHeroes, TestHeroService, HeroService } from '../model/testing/test-hero.service';\nconst firstHero = getTestHeroes()[0];\n\nfunction heroModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [HeroModule],\n      //  declarations: [ HeroDetailComponent ], // NO!  DOUBLE DECLARATION\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  describe('when navigate to existing hero', () => {\n    let expectedHero;\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      expectedHero = firstHero;\n      activatedRoute.setParamMap({\n        id: expectedHero.id\n      });\n      yield createComponent();\n    }));\n    it('should display that hero\\'s name', () => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n    it('should navigate when click cancel', () => {\n      click(page.cancelBtn);\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n    it('should save when click save but not navigate immediately', () => {\n      // Get service injected into component and spy on its`saveHero` method.\n      // It delegates to fake `HeroService.updateHero` which delivers a safe test result.\n      const hds = fixture.debugElement.injector.get(HeroDetailService);\n      const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n      click(page.saveBtn);\n      expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n      expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n    });\n    it('should navigate when click save and save resolves', fakeAsync(() => {\n      click(page.saveBtn);\n      tick(); // wait for async save to complete\n\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    }));\n    it('should convert hero name to Title Case', () => {\n      // get the name's input and display elements from the DOM\n      const hostElement = fixture.nativeElement;\n      const nameInput = hostElement.querySelector('input');\n      const nameDisplay = hostElement.querySelector('span'); // simulate user entering a new name into the input box\n\n      nameInput.value = 'quick BROWN  fOx'; // Dispatch a DOM event so that Angular learns of input value change.\n      // In older browsers, such as IE, you might need a CustomEvent instead. See\n      // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n\n      nameInput.dispatchEvent(new Event('input')); // Tell Angular to update the display binding through the title pipe\n\n      fixture.detectChanges();\n      expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n    });\n  });\n  describe('when navigate with no hero id', () => {\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield createComponent();\n    }));\n    it('should have hero.id === 0', () => {\n      expect(component.hero.id).toBe(0);\n    });\n    it('should display empty hero name', () => {\n      expect(page.nameDisplay.textContent).toBe('');\n    });\n  });\n  describe('when navigate to non-existent hero id', () => {\n    beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n      activatedRoute.setParamMap({\n        id: 99999\n      });\n      yield createComponent();\n    }));\n    it('should try to navigate back to hero list', () => {\n      expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n      expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    });\n  }); // Why we must use `fixture.debugElement.injector` in `Page()`\n\n  it('cannot use `inject` to get component\\'s provided HeroDetailService', () => {\n    let service;\n    fixture = TestBed.createComponent(HeroDetailComponent);\n    expect( // Throws because `inject` only has access to TestBed's injector\n    // which is an ancestor of the component's injector\n    inject([HeroDetailService], hds => service = hds)).toThrowError(/No provider for HeroDetailService/); // get `HeroDetailService` with component's own injector\n\n    service = fixture.debugElement.injector.get(HeroDetailService);\n    expect(service).toBeDefined('debugElement.injector');\n  });\n} /////////////////////\n\n\nimport { FormsModule } from '@angular/forms';\nimport { TitleCasePipe } from '../shared/title-case.pipe';\n\nfunction formsModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [FormsModule],\n      declarations: [HeroDetailComponent, TitleCasePipe],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n    const expectedHero = firstHero;\n    activatedRoute.setParamMap({\n      id: expectedHero.id\n    });\n    createComponent().then(() => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n  }));\n} ///////////////////////\n\n\nimport { SharedModule } from '../shared/shared.module';\n\nfunction sharedModuleSetup() {\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    const routerSpy = createRouterSpy();\n    yield TestBed.configureTestingModule({\n      imports: [SharedModule],\n      declarations: [HeroDetailComponent],\n      providers: [{\n        provide: ActivatedRoute,\n        useValue: activatedRoute\n      }, {\n        provide: HeroService,\n        useClass: TestHeroService\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents();\n  }));\n  it('should display 1st hero\\'s name', waitForAsync(() => {\n    const expectedHero = firstHero;\n    activatedRoute.setParamMap({\n      id: expectedHero.id\n    });\n    createComponent().then(() => {\n      expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n    });\n  }));\n} /////////// Helpers /////\n\n/** Create the HeroDetailComponent, initialize it, set test variables  */\n\n\nfunction createComponent() {\n  fixture = TestBed.createComponent(HeroDetailComponent);\n  component = fixture.componentInstance;\n  page = new Page(fixture); // 1st change detection triggers ngOnInit which gets a hero\n\n  fixture.detectChanges();\n  return fixture.whenStable().then(() => {\n    // 2nd change detection displays the async-fetched hero\n    fixture.detectChanges();\n  });\n}\n\nclass Page {\n  constructor(someFixture) {\n    // get the navigate spy from the injected router spy object\n    const routerSpy = someFixture.debugElement.injector.get(Router);\n    this.navigateSpy = routerSpy.navigate; // spy on component's `gotoList()` method\n\n    const someComponent = someFixture.componentInstance;\n    this.gotoListSpy = spyOn(someComponent, 'gotoList').and.callThrough();\n  } // getter properties wait to query the DOM until called.\n\n\n  get buttons() {\n    return this.queryAll('button');\n  }\n\n  get saveBtn() {\n    return this.buttons[0];\n  }\n\n  get cancelBtn() {\n    return this.buttons[1];\n  }\n\n  get nameDisplay() {\n    return this.query('span');\n  }\n\n  get nameInput() {\n    return this.query('input');\n  } //// query helpers ////\n\n\n  query(selector) {\n    return fixture.nativeElement.querySelector(selector);\n  }\n\n  queryAll(selector) {\n    return fixture.nativeElement.querySelectorAll(selector);\n  }\n\n}\n\nfunction createRouterSpy() {\n  return jasmine.createSpyObj('Router', ['navigate']);\n}","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/app/hero/hero-detail.component.spec.ts"],"names":["fakeAsync","inject","TestBed","tick","waitForAsync","Router","ActivatedRoute","ActivatedRouteStub","asyncData","click","HeroDetailComponent","HeroDetailService","HeroModule","activatedRoute","component","fixture","page","describe","beforeEach","heroModuleSetup","overrideSetup","formsModuleSetup","sharedModuleSetup","HeroDetailServiceSpy","constructor","testHero","id","name","getHero","jasmine","createSpy","and","callFake","Object","assign","saveHero","hero","setParamMap","routerSpy","createRouterSpy","configureTestingModule","imports","providers","provide","useValue","overrideComponent","set","useClass","compileComponents","hdsSpy","createComponent","debugElement","injector","get","it","expect","calls","count","toBe","nameDisplay","textContent","origName","newName","nameInput","value","dispatchEvent","Event","saveBtn","navigateSpy","any","fixtureService","componentService","not","getTestHeroes","TestHeroService","HeroService","firstHero","expectedHero","cancelBtn","hds","saveSpy","spyOn","callThrough","hostElement","nativeElement","querySelector","detectChanges","gotoListSpy","service","toThrowError","toBeDefined","FormsModule","TitleCasePipe","declarations","then","SharedModule","componentInstance","Page","whenStable","someFixture","navigate","someComponent","buttons","queryAll","query","selector","querySelectorAll","createSpyObj"],"mappings":"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","sourcesContent":["import { fakeAsync, inject, TestBed, tick, waitForAsync } from '@angular/core/testing';\nimport { Router } from '@angular/router';\nimport { ActivatedRoute, ActivatedRouteStub, asyncData, click } from '../../testing';\nimport { HeroDetailComponent } from './hero-detail.component';\nimport { HeroDetailService } from './hero-detail.service';\nimport { HeroModule } from './hero.module';\n////// Testing Vars //////\nlet activatedRoute;\nlet component;\nlet fixture;\nlet page;\n////// Tests //////\ndescribe('HeroDetailComponent', () => {\n    beforeEach(() => {\n        activatedRoute = new ActivatedRouteStub();\n    });\n    describe('with HeroModule setup', heroModuleSetup);\n    describe('when override its provided HeroDetailService', overrideSetup);\n    describe('with FormsModule setup', formsModuleSetup);\n    describe('with SharedModule setup', sharedModuleSetup);\n});\n///////////////////\nfunction overrideSetup() {\n    class HeroDetailServiceSpy {\n        constructor() {\n            this.testHero = { id: 42, name: 'Test Hero' };\n            /* emit cloned test hero */\n            this.getHero = jasmine.createSpy('getHero').and.callFake(() => asyncData(Object.assign({}, this.testHero)));\n            /* emit clone of test hero, with changes merged in */\n            this.saveHero = jasmine.createSpy('saveHero')\n                .and.callFake((hero) => asyncData(Object.assign(this.testHero, hero)));\n        }\n    }\n    // the `id` value is irrelevant because ignored by service stub\n    beforeEach(() => activatedRoute.setParamMap({ id: 99999 }));\n    beforeEach(async () => {\n        const routerSpy = createRouterSpy();\n        await TestBed\n            .configureTestingModule({\n            imports: [HeroModule],\n            providers: [\n                { provide: ActivatedRoute, useValue: activatedRoute },\n                { provide: Router, useValue: routerSpy },\n                // HeroDetailService at this level is IRRELEVANT!\n                { provide: HeroDetailService, useValue: {} }\n            ]\n        })\n            // Override component's own provider\n            .overrideComponent(HeroDetailComponent, { set: { providers: [{ provide: HeroDetailService, useClass: HeroDetailServiceSpy }] } })\n            .compileComponents();\n    });\n    let hdsSpy;\n    beforeEach(async () => {\n        await createComponent();\n        // get the component's injected HeroDetailServiceSpy\n        hdsSpy = fixture.debugElement.injector.get(HeroDetailService);\n    });\n    it('should have called `getHero`', () => {\n        expect(hdsSpy.getHero.calls.count()).toBe(1, 'getHero called once');\n    });\n    it('should display stub hero\\'s name', () => {\n        expect(page.nameDisplay.textContent).toBe(hdsSpy.testHero.name);\n    });\n    it('should save stub hero change', fakeAsync(() => {\n        const origName = hdsSpy.testHero.name;\n        const newName = 'New Name';\n        page.nameInput.value = newName;\n        // In older browsers, such as IE, you might need a CustomEvent instead. See\n        // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n        page.nameInput.dispatchEvent(new Event('input')); // tell Angular\n        expect(component.hero.name).toBe(newName, 'component hero has new name');\n        expect(hdsSpy.testHero.name).toBe(origName, 'service hero unchanged before save');\n        click(page.saveBtn);\n        expect(hdsSpy.saveHero.calls.count()).toBe(1, 'saveHero called once');\n        tick(); // wait for async save to complete\n        expect(hdsSpy.testHero.name).toBe(newName, 'service hero has new name after save');\n        expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n    }));\n    it('fixture injected service is not the component injected service', \n    // inject gets the service from the fixture\n    inject([HeroDetailService], (fixtureService) => {\n        // use `fixture.debugElement.injector` to get service from component\n        const componentService = fixture.debugElement.injector.get(HeroDetailService);\n        expect(fixtureService).not.toBe(componentService, 'service injected from fixture');\n    }));\n}\n////////////////////\nimport { getTestHeroes, TestHeroService, HeroService } from '../model/testing/test-hero.service';\nconst firstHero = getTestHeroes()[0];\nfunction heroModuleSetup() {\n    beforeEach(async () => {\n        const routerSpy = createRouterSpy();\n        await TestBed\n            .configureTestingModule({\n            imports: [HeroModule],\n            //  declarations: [ HeroDetailComponent ], // NO!  DOUBLE DECLARATION\n            providers: [\n                { provide: ActivatedRoute, useValue: activatedRoute },\n                { provide: HeroService, useClass: TestHeroService },\n                { provide: Router, useValue: routerSpy },\n            ]\n        })\n            .compileComponents();\n    });\n    describe('when navigate to existing hero', () => {\n        let expectedHero;\n        beforeEach(async () => {\n            expectedHero = firstHero;\n            activatedRoute.setParamMap({ id: expectedHero.id });\n            await createComponent();\n        });\n        it('should display that hero\\'s name', () => {\n            expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n        });\n        it('should navigate when click cancel', () => {\n            click(page.cancelBtn);\n            expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n        });\n        it('should save when click save but not navigate immediately', () => {\n            // Get service injected into component and spy on its`saveHero` method.\n            // It delegates to fake `HeroService.updateHero` which delivers a safe test result.\n            const hds = fixture.debugElement.injector.get(HeroDetailService);\n            const saveSpy = spyOn(hds, 'saveHero').and.callThrough();\n            click(page.saveBtn);\n            expect(saveSpy.calls.any()).toBe(true, 'HeroDetailService.save called');\n            expect(page.navigateSpy.calls.any()).toBe(false, 'router.navigate not called');\n        });\n        it('should navigate when click save and save resolves', fakeAsync(() => {\n            click(page.saveBtn);\n            tick(); // wait for async save to complete\n            expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n        }));\n        it('should convert hero name to Title Case', () => {\n            // get the name's input and display elements from the DOM\n            const hostElement = fixture.nativeElement;\n            const nameInput = hostElement.querySelector('input');\n            const nameDisplay = hostElement.querySelector('span');\n            // simulate user entering a new name into the input box\n            nameInput.value = 'quick BROWN  fOx';\n            // Dispatch a DOM event so that Angular learns of input value change.\n            // In older browsers, such as IE, you might need a CustomEvent instead. See\n            // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill\n            nameInput.dispatchEvent(new Event('input'));\n            // Tell Angular to update the display binding through the title pipe\n            fixture.detectChanges();\n            expect(nameDisplay.textContent).toBe('Quick Brown  Fox');\n        });\n    });\n    describe('when navigate with no hero id', () => {\n        beforeEach(async () => {\n            await createComponent();\n        });\n        it('should have hero.id === 0', () => {\n            expect(component.hero.id).toBe(0);\n        });\n        it('should display empty hero name', () => {\n            expect(page.nameDisplay.textContent).toBe('');\n        });\n    });\n    describe('when navigate to non-existent hero id', () => {\n        beforeEach(async () => {\n            activatedRoute.setParamMap({ id: 99999 });\n            await createComponent();\n        });\n        it('should try to navigate back to hero list', () => {\n            expect(page.gotoListSpy.calls.any()).toBe(true, 'comp.gotoList called');\n            expect(page.navigateSpy.calls.any()).toBe(true, 'router.navigate called');\n        });\n    });\n    // Why we must use `fixture.debugElement.injector` in `Page()`\n    it('cannot use `inject` to get component\\'s provided HeroDetailService', () => {\n        let service;\n        fixture = TestBed.createComponent(HeroDetailComponent);\n        expect(\n        // Throws because `inject` only has access to TestBed's injector\n        // which is an ancestor of the component's injector\n        inject([HeroDetailService], (hds) => service = hds))\n            .toThrowError(/No provider for HeroDetailService/);\n        // get `HeroDetailService` with component's own injector\n        service = fixture.debugElement.injector.get(HeroDetailService);\n        expect(service).toBeDefined('debugElement.injector');\n    });\n}\n/////////////////////\nimport { FormsModule } from '@angular/forms';\nimport { TitleCasePipe } from '../shared/title-case.pipe';\nfunction formsModuleSetup() {\n    beforeEach(async () => {\n        const routerSpy = createRouterSpy();\n        await TestBed\n            .configureTestingModule({\n            imports: [FormsModule],\n            declarations: [HeroDetailComponent, TitleCasePipe],\n            providers: [\n                { provide: ActivatedRoute, useValue: activatedRoute },\n                { provide: HeroService, useClass: TestHeroService },\n                { provide: Router, useValue: routerSpy },\n            ]\n        })\n            .compileComponents();\n    });\n    it('should display 1st hero\\'s name', waitForAsync(() => {\n        const expectedHero = firstHero;\n        activatedRoute.setParamMap({ id: expectedHero.id });\n        createComponent().then(() => {\n            expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n        });\n    }));\n}\n///////////////////////\nimport { SharedModule } from '../shared/shared.module';\nfunction sharedModuleSetup() {\n    beforeEach(async () => {\n        const routerSpy = createRouterSpy();\n        await TestBed\n            .configureTestingModule({\n            imports: [SharedModule],\n            declarations: [HeroDetailComponent],\n            providers: [\n                { provide: ActivatedRoute, useValue: activatedRoute },\n                { provide: HeroService, useClass: TestHeroService },\n                { provide: Router, useValue: routerSpy },\n            ]\n        })\n            .compileComponents();\n    });\n    it('should display 1st hero\\'s name', waitForAsync(() => {\n        const expectedHero = firstHero;\n        activatedRoute.setParamMap({ id: expectedHero.id });\n        createComponent().then(() => {\n            expect(page.nameDisplay.textContent).toBe(expectedHero.name);\n        });\n    }));\n}\n/////////// Helpers /////\n/** Create the HeroDetailComponent, initialize it, set test variables  */\nfunction createComponent() {\n    fixture = TestBed.createComponent(HeroDetailComponent);\n    component = fixture.componentInstance;\n    page = new Page(fixture);\n    // 1st change detection triggers ngOnInit which gets a hero\n    fixture.detectChanges();\n    return fixture.whenStable().then(() => {\n        // 2nd change detection displays the async-fetched hero\n        fixture.detectChanges();\n    });\n}\nclass Page {\n    constructor(someFixture) {\n        // get the navigate spy from the injected router spy object\n        const routerSpy = someFixture.debugElement.injector.get(Router);\n        this.navigateSpy = routerSpy.navigate;\n        // spy on component's `gotoList()` method\n        const someComponent = someFixture.componentInstance;\n        this.gotoListSpy = spyOn(someComponent, 'gotoList').and.callThrough();\n    }\n    // getter properties wait to query the DOM until called.\n    get buttons() {\n        return this.queryAll('button');\n    }\n    get saveBtn() {\n        return this.buttons[0];\n    }\n    get cancelBtn() {\n        return this.buttons[1];\n    }\n    get nameDisplay() {\n        return this.query('span');\n    }\n    get nameInput() {\n        return this.query('input');\n    }\n    //// query helpers ////\n    query(selector) {\n        return fixture.nativeElement.querySelector(selector);\n    }\n    queryAll(selector) {\n        return fixture.nativeElement.querySelectorAll(selector);\n    }\n}\nfunction createRouterSpy() {\n    return jasmine.createSpyObj('Router', ['navigate']);\n}\n"]},"metadata":{},"sourceType":"module"}