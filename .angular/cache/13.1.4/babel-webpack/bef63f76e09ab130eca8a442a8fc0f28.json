{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { asyncData } from '../../../testing';\nimport { map } from 'rxjs/operators';\nexport { HeroService } from '../hero.service';\nexport { getTestHeroes } from './test-heroes';\nimport { HeroService } from '../hero.service';\nimport { getTestHeroes } from './test-heroes';\nlet TestHeroService = class TestHeroService extends HeroService {\n  constructor() {\n    // This is a fake testing service that won't be making HTTP\n    // requests so we can pass in `null` as the HTTP client.\n    super(null);\n    this.heroes = getTestHeroes();\n  }\n\n  addHero(hero) {\n    throw new Error('Method not implemented.');\n  }\n\n  deleteHero(hero) {\n    throw new Error('Method not implemented.');\n  }\n\n  getHeroes() {\n    return this.lastResult = asyncData(this.heroes);\n  }\n\n  getHero(id) {\n    if (typeof id === 'string') {\n      id = parseInt(id, 10);\n    }\n\n    const hero = this.heroes.find(h => h.id === id);\n    this.lastResult = asyncData(hero);\n    return this.lastResult;\n  }\n\n  updateHero(hero) {\n    return this.lastResult = this.getHero(hero.id).pipe(map(h => {\n      if (h) {\n        return Object.assign(h, hero);\n      }\n\n      throw new Error(`Hero ${hero.id} not found`);\n    }));\n  }\n\n};\n\nTestHeroService.ctorParameters = () => [];\n\nTestHeroService = __decorate([Injectable()\n/**\n * FakeHeroService pretends to make real http requests.\n * implements only as much of HeroService as is actually consumed by the app\n */\n], TestHeroService);\nexport { TestHeroService };","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/app/model/testing/test-hero.service.ts"],"names":["__decorate","Injectable","asyncData","map","HeroService","getTestHeroes","TestHeroService","constructor","heroes","addHero","hero","Error","deleteHero","getHeroes","lastResult","getHero","id","parseInt","find","h","updateHero","pipe","Object","assign","ctorParameters"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,GAAT,QAAoB,gBAApB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,SAASD,WAAT,QAA4B,iBAA5B;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,IAAIC,eAAe,GAAG,MAAMA,eAAN,SAA8BF,WAA9B,CAA0C;AAC5DG,EAAAA,WAAW,GAAG;AACV;AACA;AACA,UAAM,IAAN;AACA,SAAKC,MAAL,GAAcH,aAAa,EAA3B;AACH;;AACDI,EAAAA,OAAO,CAACC,IAAD,EAAO;AACV,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACDC,EAAAA,UAAU,CAACF,IAAD,EAAO;AACb,UAAM,IAAIC,KAAJ,CAAU,yBAAV,CAAN;AACH;;AACDE,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKC,UAAL,GAAkBZ,SAAS,CAAC,KAAKM,MAAN,CAAlC;AACH;;AACDO,EAAAA,OAAO,CAACC,EAAD,EAAK;AACR,QAAI,OAAOA,EAAP,KAAc,QAAlB,EAA4B;AACxBA,MAAAA,EAAE,GAAGC,QAAQ,CAACD,EAAD,EAAK,EAAL,CAAb;AACH;;AACD,UAAMN,IAAI,GAAG,KAAKF,MAAL,CAAYU,IAAZ,CAAiBC,CAAC,IAAIA,CAAC,CAACH,EAAF,KAASA,EAA/B,CAAb;AACA,SAAKF,UAAL,GAAkBZ,SAAS,CAACQ,IAAD,CAA3B;AACA,WAAO,KAAKI,UAAZ;AACH;;AACDM,EAAAA,UAAU,CAACV,IAAD,EAAO;AACb,WAAO,KAAKI,UAAL,GAAkB,KAAKC,OAAL,CAAaL,IAAI,CAACM,EAAlB,EAAsBK,IAAtB,CAA2BlB,GAAG,CAACgB,CAAC,IAAI;AACzD,UAAIA,CAAJ,EAAO;AACH,eAAOG,MAAM,CAACC,MAAP,CAAcJ,CAAd,EAAiBT,IAAjB,CAAP;AACH;;AACD,YAAM,IAAIC,KAAJ,CAAW,QAAOD,IAAI,CAACM,EAAG,YAA1B,CAAN;AACH,KALsD,CAA9B,CAAzB;AAMH;;AA/B2D,CAAhE;;AAiCAV,eAAe,CAACkB,cAAhB,GAAiC,MAAM,EAAvC;;AACAlB,eAAe,GAAGN,UAAU,CAAC,CACzBC,UAAU;AACV;AACJ;AACA;AACA;AAL6B,CAAD,EAMzBK,eANyB,CAA5B;AAOA,SAASA,eAAT","sourcesContent":["import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { asyncData } from '../../../testing';\nimport { map } from 'rxjs/operators';\nexport { HeroService } from '../hero.service';\nexport { getTestHeroes } from './test-heroes';\nimport { HeroService } from '../hero.service';\nimport { getTestHeroes } from './test-heroes';\nlet TestHeroService = class TestHeroService extends HeroService {\n    constructor() {\n        // This is a fake testing service that won't be making HTTP\n        // requests so we can pass in `null` as the HTTP client.\n        super(null);\n        this.heroes = getTestHeroes();\n    }\n    addHero(hero) {\n        throw new Error('Method not implemented.');\n    }\n    deleteHero(hero) {\n        throw new Error('Method not implemented.');\n    }\n    getHeroes() {\n        return this.lastResult = asyncData(this.heroes);\n    }\n    getHero(id) {\n        if (typeof id === 'string') {\n            id = parseInt(id, 10);\n        }\n        const hero = this.heroes.find(h => h.id === id);\n        this.lastResult = asyncData(hero);\n        return this.lastResult;\n    }\n    updateHero(hero) {\n        return this.lastResult = this.getHero(hero.id).pipe(map(h => {\n            if (h) {\n                return Object.assign(h, hero);\n            }\n            throw new Error(`Hero ${hero.id} not found`);\n        }));\n    }\n};\nTestHeroService.ctorParameters = () => [];\nTestHeroService = __decorate([\n    Injectable()\n    /**\n     * FakeHeroService pretends to make real http requests.\n     * implements only as much of HeroService as is actually consumed by the app\n     */\n], TestHeroService);\nexport { TestHeroService };\n"]},"metadata":{},"sourceType":"module"}