{"ast":null,"code":"import { TestBed, waitForAsync } from '@angular/core/testing';\nimport { addMatchers, asyncData, click } from '../../testing';\nimport { HeroService } from '../model/hero.service';\nimport { getTestHeroes } from '../model/testing/test-heroes';\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardModule } from './dashboard.module';\nbeforeEach(addMatchers);\nlet comp;\nlet fixture; ////////  Deep  ////////////////\n\ndescribe('DashboardComponent (deep)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [DashboardModule]\n    });\n  });\n  compileAndCreate();\n  tests(clickForDeep);\n\n  function clickForDeep() {\n    // get first <div class=\"hero\">\n    const heroEl = fixture.nativeElement.querySelector('.hero');\n    click(heroEl);\n  }\n}); ////////  Shallow ////////////////\n\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('DashboardComponent (shallow)', () => {\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      declarations: [DashboardComponent],\n      schemas: [NO_ERRORS_SCHEMA]\n    });\n  });\n  compileAndCreate();\n  tests(clickForShallow);\n\n  function clickForShallow() {\n    // get first <dashboard-hero> DebugElement\n    const heroDe = fixture.debugElement.query(By.css('dashboard-hero'));\n    heroDe.triggerEventHandler('selected', comp.heroes[0]);\n  }\n});\n/** Add TestBed providers, compile, and create DashboardComponent */\n\nfunction compileAndCreate() {\n  beforeEach(waitForAsync(() => {\n    const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n    const heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n    TestBed.configureTestingModule({\n      providers: [{\n        provide: HeroService,\n        useValue: heroServiceSpy\n      }, {\n        provide: Router,\n        useValue: routerSpy\n      }]\n    }).compileComponents().then(() => {\n      fixture = TestBed.createComponent(DashboardComponent);\n      comp = fixture.componentInstance; // getHeroes spy returns observable of test heroes\n\n      heroServiceSpy.getHeroes.and.returnValue(asyncData(getTestHeroes()));\n    });\n  }));\n}\n/**\n * The (almost) same tests for both.\n * Only change: the way that the first hero is clicked\n */\n\n\nfunction tests(heroClick) {\n  it('should NOT have heroes before ngOnInit', () => {\n    expect(comp.heroes.length).toBe(0, 'should not have heroes before ngOnInit');\n  });\n  it('should NOT have heroes immediately after ngOnInit', () => {\n    fixture.detectChanges(); // runs initial lifecycle hooks\n\n    expect(comp.heroes.length).toBe(0, 'should not have heroes until service promise resolves');\n  });\n  describe('after get dashboard heroes', () => {\n    let router; // Trigger component so it gets heroes and binds to them\n\n    beforeEach(waitForAsync(() => {\n      router = fixture.debugElement.injector.get(Router);\n      fixture.detectChanges(); // runs ngOnInit -> getHeroes\n\n      fixture.whenStable() // No need for the `lastPromise` hack!\n      .then(() => fixture.detectChanges()); // bind to heroes\n    }));\n    it('should HAVE heroes', () => {\n      expect(comp.heroes.length).toBeGreaterThan(0, 'should have heroes after service promise resolves');\n    });\n    it('should DISPLAY heroes', () => {\n      // Find and examine the displayed heroes\n      // Look for them in the DOM by css class\n      const heroes = fixture.nativeElement.querySelectorAll('dashboard-hero');\n      expect(heroes.length).toBe(4, 'should display 4 heroes');\n    });\n    it('should tell ROUTER to navigate when hero clicked', () => {\n      heroClick(); // trigger click on first inner <div class=\"hero\">\n      // args passed to router.navigateByUrl() spy\n\n      const spy = router.navigateByUrl;\n      const navArgs = spy.calls.first().args[0]; // expecting to navigate to id of the component's first hero\n\n      const id = comp.heroes[0].id;\n      expect(navArgs).toBe('/heroes/' + id, 'should nav to HeroDetail for first hero');\n    });\n  });\n}","map":{"version":3,"sources":["/home/yadadev/work/trainings/mean/angular/angular_testing/src/app/dashboard/dashboard.component.spec.ts"],"names":["TestBed","waitForAsync","addMatchers","asyncData","click","HeroService","getTestHeroes","By","Router","DashboardComponent","DashboardModule","beforeEach","comp","fixture","describe","configureTestingModule","imports","compileAndCreate","tests","clickForDeep","heroEl","nativeElement","querySelector","NO_ERRORS_SCHEMA","declarations","schemas","clickForShallow","heroDe","debugElement","query","css","triggerEventHandler","heroes","routerSpy","jasmine","createSpyObj","heroServiceSpy","providers","provide","useValue","compileComponents","then","createComponent","componentInstance","getHeroes","and","returnValue","heroClick","it","expect","length","toBe","detectChanges","router","injector","get","whenStable","toBeGreaterThan","querySelectorAll","spy","navigateByUrl","navArgs","calls","first","args","id"],"mappings":"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","sourcesContent":["import { TestBed, waitForAsync } from '@angular/core/testing';\nimport { addMatchers, asyncData, click } from '../../testing';\nimport { HeroService } from '../model/hero.service';\nimport { getTestHeroes } from '../model/testing/test-heroes';\nimport { By } from '@angular/platform-browser';\nimport { Router } from '@angular/router';\nimport { DashboardComponent } from './dashboard.component';\nimport { DashboardModule } from './dashboard.module';\nbeforeEach(addMatchers);\nlet comp;\nlet fixture;\n////////  Deep  ////////////////\ndescribe('DashboardComponent (deep)', () => {\n    beforeEach(() => {\n        TestBed.configureTestingModule({ imports: [DashboardModule] });\n    });\n    compileAndCreate();\n    tests(clickForDeep);\n    function clickForDeep() {\n        // get first <div class=\"hero\">\n        const heroEl = fixture.nativeElement.querySelector('.hero');\n        click(heroEl);\n    }\n});\n////////  Shallow ////////////////\nimport { NO_ERRORS_SCHEMA } from '@angular/core';\ndescribe('DashboardComponent (shallow)', () => {\n    beforeEach(() => {\n        TestBed.configureTestingModule({ declarations: [DashboardComponent], schemas: [NO_ERRORS_SCHEMA] });\n    });\n    compileAndCreate();\n    tests(clickForShallow);\n    function clickForShallow() {\n        // get first <dashboard-hero> DebugElement\n        const heroDe = fixture.debugElement.query(By.css('dashboard-hero'));\n        heroDe.triggerEventHandler('selected', comp.heroes[0]);\n    }\n});\n/** Add TestBed providers, compile, and create DashboardComponent */\nfunction compileAndCreate() {\n    beforeEach(waitForAsync(() => {\n        const routerSpy = jasmine.createSpyObj('Router', ['navigateByUrl']);\n        const heroServiceSpy = jasmine.createSpyObj('HeroService', ['getHeroes']);\n        TestBed\n            .configureTestingModule({\n            providers: [\n                { provide: HeroService, useValue: heroServiceSpy }, { provide: Router, useValue: routerSpy }\n            ]\n        })\n            .compileComponents()\n            .then(() => {\n            fixture = TestBed.createComponent(DashboardComponent);\n            comp = fixture.componentInstance;\n            // getHeroes spy returns observable of test heroes\n            heroServiceSpy.getHeroes.and.returnValue(asyncData(getTestHeroes()));\n        });\n    }));\n}\n/**\n * The (almost) same tests for both.\n * Only change: the way that the first hero is clicked\n */\nfunction tests(heroClick) {\n    it('should NOT have heroes before ngOnInit', () => {\n        expect(comp.heroes.length).toBe(0, 'should not have heroes before ngOnInit');\n    });\n    it('should NOT have heroes immediately after ngOnInit', () => {\n        fixture.detectChanges(); // runs initial lifecycle hooks\n        expect(comp.heroes.length).toBe(0, 'should not have heroes until service promise resolves');\n    });\n    describe('after get dashboard heroes', () => {\n        let router;\n        // Trigger component so it gets heroes and binds to them\n        beforeEach(waitForAsync(() => {\n            router = fixture.debugElement.injector.get(Router);\n            fixture.detectChanges(); // runs ngOnInit -> getHeroes\n            fixture.whenStable() // No need for the `lastPromise` hack!\n                .then(() => fixture.detectChanges()); // bind to heroes\n        }));\n        it('should HAVE heroes', () => {\n            expect(comp.heroes.length)\n                .toBeGreaterThan(0, 'should have heroes after service promise resolves');\n        });\n        it('should DISPLAY heroes', () => {\n            // Find and examine the displayed heroes\n            // Look for them in the DOM by css class\n            const heroes = fixture.nativeElement.querySelectorAll('dashboard-hero');\n            expect(heroes.length).toBe(4, 'should display 4 heroes');\n        });\n        it('should tell ROUTER to navigate when hero clicked', () => {\n            heroClick(); // trigger click on first inner <div class=\"hero\">\n            // args passed to router.navigateByUrl() spy\n            const spy = router.navigateByUrl;\n            const navArgs = spy.calls.first().args[0];\n            // expecting to navigate to id of the component's first hero\n            const id = comp.heroes[0].id;\n            expect(navArgs).toBe('/heroes/' + id, 'should nav to HeroDetail for first hero');\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module"}